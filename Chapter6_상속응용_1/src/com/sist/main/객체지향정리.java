package com.sist.main;
/*
 * 	메모리구조
 * 	-----------
 * 	MethodArea, static => 컴파일러가 자동 저장
 * 	method도 메모리에 저장
 * 	void method()
 * 	{
 * 		구현부가 있어야 저장이 된다
 * 	}
 * 	=> 메소드 선언만 된 경우에는 클래스를 저장하지 못한다 (미완성된 클래스)
 * 		(추상클래스, 인터페이스) => 요구사항 분석
 * 				  ------- 데이터베이스 연결, 윈도우, 네트워크 서버
 * 						  웹구현
 * 		void method();
 * 	-----------
 * 	Stack : LIFO
 * 			지역변수, 매개변수 저장 => 메모리 자체에서 관리 ({}이 종료되면 사라진다)
 * 			class A
 * 			{
 * 				void method()
 * 				{
 * 					int a = 10;
 * 					if(a%2==0)
 * 					{
 * 						int b = 20;
 * 						if(b==20)
 * 						{
 * 							int c = 30;
 * 						}//c 
 * 					}//b
 * 				}//a
 * 			}
 * 	-----------
 * 	Heap : 동적메모리 할당 (new) => 객체변수, 배열 (참조변수값)
 * 			=> 관리(프로그래머) => GC(자동메모리 회수)
 * 			=> 객체=null
 * 	A.java ==> A.class ==>
 * 		 javac		  java
 * 	class A => 인터프리터 => 한줄씩 번역
 * 	{
 * 	  ---
 * 	  ---
 * 	  ---
 * 	  ---
 * 	  ---
 * 	}
 * 	-----------
 * 	클래스
 * 	----
 * 	1. 구성요소
 * 	   1) 변수
 * 		= 인스턴스변수 : 객체마다 메모리를 따로 저장
 * 		= 정적변수 : 메모리 공간이 한개를 사용한다 (공유변수, 클래스변수)
 * 		  - static
 *     2) 메소드
 *     3) 생성자
 * 	2. 클래스 설계
 * 	3. 접근지정어
 * 	4. 객체지향의 특성
 * 	5. 제어자
 */
public class 객체지향정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
